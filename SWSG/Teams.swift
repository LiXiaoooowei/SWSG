//
//  Teams.swift
//  SWSG
//
//  Created by Li Xiaowei on 3/18/17.
//  Copyright Â© 2017 nus.cs3217.swsg. All rights reserved.
//

/**
 Teams is a collection of all teams object which represents a local cache of all teams
 
 -Parameter: `teams` is a mutable [Team] object which represents all teams
 */

import Foundation
import Firebase

class Teams {
    
    var teams = [Team]()
    var count: Int {
        get {
            return teams.count
        }
    }
    
    /// replace the entire teams object by a new instance
    func replaceTeams(teams: [Team]) {
        self.teams = teams
    }
    
    /// add `team` to `teams`
    /// -parameter:
    ///    -`team`: team to be added
    func addTeam(team: Team) {
        if let index = teams.index(of: team) {
            teams[index] = team
        } else {
            teams.append(team)
        }
    }
    
    /// retrieve team with a unique team identifier.
    /// -parameters:
    ///    -`id`: team identifier, a unique string generated by firebase automatically
    func retrieveTeamWith(id: String, completion: @escaping (Team?) -> Void) {
        System.client.getTeam(with: id, completion: {
            (team, error) in
            completion(team)
        })
    }
    
    ///retrieve team with a `index` in the `teams` array
    func retrieveTeamWith(index: Int) -> Team? {
        if index < teams.count {
            return teams[index]
        } else {
            return nil
        }
    }
    
    ///replace team for `team`, team is identified by its unique id.
    ///-parameters:
    ///    -`team`: new team to replace, which has the same identifier at the previous team.
    func replaceTeam(for team: Team) {
        for i in 0..<teams.count {
            if team.id == teams[i].id {
                teams[i] = team
                break
            }
        }
    }
    
    ///replace team at `index` with `team`
    ///-parameters:
    ///    -`index`: index at which the team should be replaced
    ///    -`team`: the team to replace at teams[index]
    func replaceTeamAt(index: Int, with team: Team) {
        teams[index] = team
    }
    
    ///remove the `team` from `teams`
    ///-parameters:
    ///    -`team`: team to be removed
    func removeTeam(team: Team) {
        guard let index = teams.index(of: team) else {
            return
        }
        teams.remove(at: index)
    }
}


